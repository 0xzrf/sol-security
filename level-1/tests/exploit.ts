import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Level1 } from "../target/types/level_1";

describe("level-1", () => {
  anchor.setProvider(anchor.AnchorProvider.env());


  const program = anchor.workspace.Level1 as Program<Level1>;

  const explorer = anchor.web3.Keypair.generate();

  const systemProgram = anchor.web3.SystemProgram.programId;

  before("Prepare", async () => {
    await airdrop(program.provider.connection, explorer.publicKey);

  });

  it("Exploit here!", async () => {
    const [ancientVault,] = anchor.web3.PublicKey.findProgramAddressSync(
      [
        Buffer.from('ancient_vault'),
      ],
      program.programId
    );


    const tx1 = await program.methods.accessVault(8)
    .accountsStrict({
      ancientVault,
      explorer: explorer.publicKey,
      systemProgram
    })
    .signers([explorer])
    .rpc();

    const ancientVaultProgram = await program.account.ancientVault.fetch(ancientVault);


    console.log(`Ancient vault val secret 2::: ${ancientVaultProgram.secret2}`)

    const connection = program.provider.connection;

    // Confirm the transaction to ensure it's finalized
    const latestBlockhash = await connection.getLatestBlockhash();

    await connection.confirmTransaction(
      {
        signature: tx1,
        blockhash: latestBlockhash.blockhash,
        lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
      },
      "confirmed"
    );
  
    // Retrieve the transaction details
    const txDetails = await connection.getTransaction(tx1, {
      commitment: "confirmed",
      maxSupportedTransactionVersion: 0,
    });
  
    const logs = txDetails?.meta?.logMessages;
  
    if (logs) {
      console.log("Transaction Logs:");
      logs.forEach((log) => console.log(log));
    } else {
      console.log("No logs found for this transaction.");
    }

  });
});

async function airdrop(
  connection: any,
  address: any,
  amount = 500_000_000_000
) {
  await connection.confirmTransaction(
    await connection.requestAirdrop(address, amount),
    'confirmed'
  );
}
